import type { NextPage } from 'next';
import React from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Nominee from '../component/nominee';
import styles from '../styles/Home.module.css';
import * as _ from 'lodash';
import Button from '../component/button';
import Modal from 'react-modal';
import ModalComponent from '../component/modal';

const Home: NextPage = (AppProps) => {
  const [nominess, setNominess] = React.useState<any>({});
  const [modalIsOpen, setIsOpen] = React.useState(false);
  const selectNominessCb = (parentId: string, itemId: string) => {
    let data = { ...nominess };
    let parentIndex = data[parentId].findIndex(
      (x: any) => x.isSelected === true
    );
    if (parentIndex === -1) {
      data[parentId][0].isSelected = true;
      let itemIndex = data[parentId][0].items.findIndex(
        (x: any) => x.id === itemId
      );
      data[parentId][0].items[itemIndex].isSelected = true;
      setNominess(data);
    } else {
      data[parentId][0].isSelected = true;
      let selectedItemIndex = data[parentId][0].items.findIndex(
        (x: any) => x.isSelected === true
      );
      data[parentId][0].items[selectedItemIndex].isSelected = false;
      let itemIndex = data[parentId][0].items.findIndex(
        (x: any) => x.id === itemId
      );
      data[parentId][0].items[itemIndex].isSelected = true;
      setNominess(data);
    }
  };
  const fetchApiData = async () => {
    const res = await fetch(`http://localhost:3000/api/ballots`);
    let data = await res.json();
    if (data && data.items) {
      for (let i = 0; i < data.items.length; i++) {
        data.items[i].isSelected = false;
        for (let x = 0; x < data.items[i].items.length; x++) {
          data.items[i].items[x].isSelected = false;
        }
      }
    }
    const groupedData = _.chain(data.items).groupBy('id').value();
    setNominess(groupedData);
  };
  const showResult = () => {
    openModal();
  };
  const openModal = () => {
    setIsOpen(true);
  };
  const closeModal = () => {
    setIsOpen(false);
  };
  React.useEffect(() => {
    fetchApiData();
    return () => {
      console.log('Component will be unmount');
    };
  }, []);
  return (
    <div className={styles.container}>
      <Head>
        <title>Take Home Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {/* <h1 className={styles.title}>Good Luck!</h1> */}
        {Object.keys(nominess).length > 0 &&
          Object.keys(nominess).map((n, idx) => {
            return (
              <Nominee
                data={nominess[n]}
                index={idx}
                key={idx}
                selectNominessCb={selectNominessCb}
                isButtonShow={true}
                isSelectedShow={false}
              />
            );
          })}
        <div className={styles.buttonContiner}>
          <Button text="SUBMIT BALLOT BUTTON" onClick={showResult} />

          <ModalComponent
            modalIsOpen={modalIsOpen}
            closeModal={closeModal}
            selectedNominess={nominess}
          />
        </div>
      </main>
    </div>
  );
};
export default Home;
